# coding: utf-8

"""
    Serge API

    API documentation for Serge server  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game_turn': 'int',
        'game_turn_time': 'str',
        'game_date': 'str'
    }

    attribute_map = {
        'game_turn': 'gameTurn',
        'game_turn_time': 'gameTurnTime',
        'game_date': 'gameDate'
    }

    def __init__(self, game_turn=None, game_turn_time=None, game_date=None):  # noqa: E501
        """InlineResponse2008Data - a model defined in Swagger"""  # noqa: E501
        self._game_turn = None
        self._game_turn_time = None
        self._game_date = None
        self.discriminator = None
        if game_turn is not None:
            self.game_turn = game_turn
        if game_turn_time is not None:
            self.game_turn_time = game_turn_time
        if game_date is not None:
            self.game_date = game_date

    @property
    def game_turn(self):
        """Gets the game_turn of this InlineResponse2008Data.  # noqa: E501


        :return: The game_turn of this InlineResponse2008Data.  # noqa: E501
        :rtype: int
        """
        return self._game_turn

    @game_turn.setter
    def game_turn(self, game_turn):
        """Sets the game_turn of this InlineResponse2008Data.


        :param game_turn: The game_turn of this InlineResponse2008Data.  # noqa: E501
        :type: int
        """

        self._game_turn = game_turn

    @property
    def game_turn_time(self):
        """Gets the game_turn_time of this InlineResponse2008Data.  # noqa: E501


        :return: The game_turn_time of this InlineResponse2008Data.  # noqa: E501
        :rtype: str
        """
        return self._game_turn_time

    @game_turn_time.setter
    def game_turn_time(self, game_turn_time):
        """Sets the game_turn_time of this InlineResponse2008Data.


        :param game_turn_time: The game_turn_time of this InlineResponse2008Data.  # noqa: E501
        :type: str
        """

        self._game_turn_time = game_turn_time

    @property
    def game_date(self):
        """Gets the game_date of this InlineResponse2008Data.  # noqa: E501


        :return: The game_date of this InlineResponse2008Data.  # noqa: E501
        :rtype: str
        """
        return self._game_date

    @game_date.setter
    def game_date(self, game_date):
        """Sets the game_date of this InlineResponse2008Data.


        :param game_date: The game_date of this InlineResponse2008Data.  # noqa: E501
        :type: str
        """

        self._game_date = game_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
