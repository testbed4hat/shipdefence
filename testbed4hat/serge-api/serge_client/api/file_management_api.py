# coding: utf-8

"""
    Serge API

    API documentation for Serge server  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from serge_client.api_client import ApiClient


class FileManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_icon_icon_get(self, icon, **kwargs):  # noqa: E501
        """Get icon  # noqa: E501

        Retrieves an icon image by its filename.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_icon_icon_get(icon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str icon: Filename of the icon to retrieve. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_icon_icon_get_with_http_info(icon, **kwargs)  # noqa: E501
        else:
            (data) = self.get_icon_icon_get_with_http_info(icon, **kwargs)  # noqa: E501
            return data

    def get_icon_icon_get_with_http_info(self, icon, **kwargs):  # noqa: E501
        """Get icon  # noqa: E501

        Retrieves an icon image by its filename.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_icon_icon_get_with_http_info(icon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str icon: Filename of the icon to retrieve. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['icon']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_icon_icon_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'icon' is set
        if ('icon' not in params or
                params['icon'] is None):
            raise ValueError("Missing the required parameter `icon` when calling `get_icon_icon_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'icon' in params:
            path_params['icon'] = params['icon']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png', 'image/svg+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getIcon/{icon}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_icon_post(self, body, **kwargs):  # noqa: E501
        """Save icon  # noqa: E501

        Uploads an icon image (PNG or SVG) and saves it to the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_icon_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_icon_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.save_icon_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def save_icon_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Save icon  # noqa: E501

        Uploads an icon image (PNG or SVG) and saves it to the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_icon_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_icon_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_icon_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['image/png', 'image/svg+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/saveIcon', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_logo_post(self, body, **kwargs):  # noqa: E501
        """Save a logo image  # noqa: E501

        Uploads a logo image in PNG or SVG format and saves it to the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_logo_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_logo_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.save_logo_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def save_logo_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Save a logo image  # noqa: E501

        Uploads a logo image in PNG or SVG format and saves it to the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_logo_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object body: (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_logo_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_logo_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['image/png', 'image/svg+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/saveLogo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tiles_folder_zyx_get(self, folder, z, y, x, **kwargs):  # noqa: E501
        """Get tile image  # noqa: E501

        Returns a tile image based on the specified folder and coordinates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tiles_folder_zyx_get(folder, z, y, x, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Folder name (required)
        :param str z: Z coordinate (required)
        :param str y: Y coordinate (required)
        :param str x: X coordinate (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tiles_folder_zyx_get_with_http_info(folder, z, y, x, **kwargs)  # noqa: E501
        else:
            (data) = self.tiles_folder_zyx_get_with_http_info(folder, z, y, x, **kwargs)  # noqa: E501
            return data

    def tiles_folder_zyx_get_with_http_info(self, folder, z, y, x, **kwargs):  # noqa: E501
        """Get tile image  # noqa: E501

        Returns a tile image based on the specified folder and coordinates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tiles_folder_zyx_get_with_http_info(folder, z, y, x, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Folder name (required)
        :param str z: Z coordinate (required)
        :param str y: Y coordinate (required)
        :param str x: X coordinate (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder', 'z', 'y', 'x']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tiles_folder_zyx_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder' is set
        if ('folder' not in params or
                params['folder'] is None):
            raise ValueError("Missing the required parameter `folder` when calling `tiles_folder_zyx_get`")  # noqa: E501
        # verify the required parameter 'z' is set
        if ('z' not in params or
                params['z'] is None):
            raise ValueError("Missing the required parameter `z` when calling `tiles_folder_zyx_get`")  # noqa: E501
        # verify the required parameter 'y' is set
        if ('y' not in params or
                params['y'] is None):
            raise ValueError("Missing the required parameter `y` when calling `tiles_folder_zyx_get`")  # noqa: E501
        # verify the required parameter 'x' is set
        if ('x' not in params or
                params['x'] is None):
            raise ValueError("Missing the required parameter `x` when calling `tiles_folder_zyx_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder' in params:
            path_params['folder'] = params['folder']  # noqa: E501
        if 'z' in params:
            path_params['z'] = params['z']  # noqa: E501
        if 'y' in params:
            path_params['y'] = params['y']  # noqa: E501
        if 'x' in params:
            path_params['x'] = params['x']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png', 'image/svg+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tiles/{folder}/{z}/{y}/{x}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
