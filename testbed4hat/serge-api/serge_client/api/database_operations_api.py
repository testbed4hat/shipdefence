# coding: utf-8

"""
    Serge API

    API documentation for Serge server  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from serge_client.api_client import ApiClient


class DatabaseOperationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def all_dbs_get(self, **kwargs):  # noqa: E501
        """Get all wargame names  # noqa: E501

        Retrieves the names of all wargame databases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_dbs_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_dbs_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.all_dbs_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def all_dbs_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all wargame names  # noqa: E501

        Retrieves the names of all wargame databases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_dbs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_dbs_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/allDbs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_docs_dbname_put(self, body, dbname, **kwargs):  # noqa: E501
        """Bulk document update  # noqa: E501

        Updates multiple documents in a specified database in bulk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_docs_dbname_put(body, dbname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] body: (required)
        :param str dbname: Name of the database to update documents in. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_docs_dbname_put_with_http_info(body, dbname, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_docs_dbname_put_with_http_info(body, dbname, **kwargs)  # noqa: E501
            return data

    def bulk_docs_dbname_put_with_http_info(self, body, dbname, **kwargs):  # noqa: E501
        """Bulk document update  # noqa: E501

        Updates multiple documents in a specified database in bulk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_docs_dbname_put_with_http_info(body, dbname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] body: (required)
        :param str dbname: Name of the database to update documents in. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dbname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_docs_dbname_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_docs_dbname_put`")  # noqa: E501
        # verify the required parameter 'dbname' is set
        if ('dbname' not in params or
                params['dbname'] is None):
            raise ValueError("Missing the required parameter `dbname` when calling `bulk_docs_dbname_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dbname' in params:
            path_params['dbname'] = params['dbname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bulkDocs/{dbname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clear_all_delete(self, **kwargs):  # noqa: E501
        """Clear all databases  # noqa: E501

        Resets all databases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_all_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_all_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.clear_all_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def clear_all_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Clear all databases  # noqa: E501

        Resets all databases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_all_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_all_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/clearAll', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_db_name_delete(self, db_name, **kwargs):  # noqa: E501
        """Delete database  # noqa: E501

        Deletes a specified database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_db_name_delete(db_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str db_name: Name of the database to delete. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_db_name_delete_with_http_info(db_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_db_name_delete_with_http_info(db_name, **kwargs)  # noqa: E501
            return data

    def delete_db_name_delete_with_http_info(self, db_name, **kwargs):  # noqa: E501
        """Delete database  # noqa: E501

        Deletes a specified database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_db_name_delete_with_http_info(db_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str db_name: Name of the database to delete. (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_db_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_name' is set
        if ('db_name' not in params or
                params['db_name'] is None):
            raise ValueError("Missing the required parameter `db_name` when calling `delete_db_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_name' in params:
            path_params['dbName'] = params['db_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/delete/{dbName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wargame_id_get(self, wargame, id, **kwargs):  # noqa: E501
        """Get document for a specified wargame  # noqa: E501

        Retrieves a document for the specified wargame and document ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wargame_id_get(wargame, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame database. (required)
        :param str id: The ID of the document. (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wargame_id_get_with_http_info(wargame, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_wargame_id_get_with_http_info(wargame, id, **kwargs)  # noqa: E501
            return data

    def get_wargame_id_get_with_http_info(self, wargame, id, **kwargs):  # noqa: E501
        """Get document for a specified wargame  # noqa: E501

        Retrieves a document for the specified wargame and document ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wargame_id_get_with_http_info(wargame, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame database. (required)
        :param str id: The ID of the document. (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wargame', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wargame_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wargame' is set
        if ('wargame' not in params or
                params['wargame'] is None):
            raise ValueError("Missing the required parameter `wargame` when calling `get_wargame_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_wargame_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wargame' in params:
            path_params['wargame'] = params['wargame']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/get/{wargame}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replicate_replicate_dbname_get(self, replicate, dbname, **kwargs):  # noqa: E501
        """Replicate database  # noqa: E501

        Replicates data from an existing database to a new database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replicate_replicate_dbname_get(replicate, dbname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str replicate: Name of the new database to replicate data into. (required)
        :param str dbname: Name of the existing database to replicate data from. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replicate_replicate_dbname_get_with_http_info(replicate, dbname, **kwargs)  # noqa: E501
        else:
            (data) = self.replicate_replicate_dbname_get_with_http_info(replicate, dbname, **kwargs)  # noqa: E501
            return data

    def replicate_replicate_dbname_get_with_http_info(self, replicate, dbname, **kwargs):  # noqa: E501
        """Replicate database  # noqa: E501

        Replicates data from an existing database to a new database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replicate_replicate_dbname_get_with_http_info(replicate, dbname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str replicate: Name of the new database to replicate data into. (required)
        :param str dbname: Name of the existing database to replicate data from. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['replicate', 'dbname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replicate_replicate_dbname_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'replicate' is set
        if ('replicate' not in params or
                params['replicate'] is None):
            raise ValueError("Missing the required parameter `replicate` when calling `replicate_replicate_dbname_get`")  # noqa: E501
        # verify the required parameter 'dbname' is set
        if ('dbname' not in params or
                params['dbname'] is None):
            raise ValueError("Missing the required parameter `dbname` when calling `replicate_replicate_dbname_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'replicate' in params:
            path_params['replicate'] = params['replicate']  # noqa: E501
        if 'dbname' in params:
            path_params['dbname'] = params['dbname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/replicate/{replicate}/{dbname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wargame_dbname_logs_get(self, wargame, dbname, **kwargs):  # noqa: E501
        """Get logs for a specific database within a wargame  # noqa: E501

        Retrieves logs for a specified database within the specified wargame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_dbname_logs_get(wargame, dbname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame. (required)
        :param str dbname: The name of the database within the wargame. (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wargame_dbname_logs_get_with_http_info(wargame, dbname, **kwargs)  # noqa: E501
        else:
            (data) = self.wargame_dbname_logs_get_with_http_info(wargame, dbname, **kwargs)  # noqa: E501
            return data

    def wargame_dbname_logs_get_with_http_info(self, wargame, dbname, **kwargs):  # noqa: E501
        """Get logs for a specific database within a wargame  # noqa: E501

        Retrieves logs for a specified database within the specified wargame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_dbname_logs_get_with_http_info(wargame, dbname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame. (required)
        :param str dbname: The name of the database within the wargame. (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wargame', 'dbname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wargame_dbname_logs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wargame' is set
        if ('wargame' not in params or
                params['wargame'] is None):
            raise ValueError("Missing the required parameter `wargame` when calling `wargame_dbname_logs_get`")  # noqa: E501
        # verify the required parameter 'dbname' is set
        if ('dbname' not in params or
                params['dbname'] is None):
            raise ValueError("Missing the required parameter `dbname` when calling `wargame_dbname_logs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wargame' in params:
            path_params['wargame'] = params['wargame']  # noqa: E501
        if 'dbname' in params:
            path_params['dbname'] = params['dbname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{wargame}/{dbname}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wargame_dbname_logs_latest_get(self, wargame, dbname, **kwargs):  # noqa: E501
        """Get the latest logs for a specific database within a wargame  # noqa: E501

        Retrieves the latest logs for a specified database within the specified wargame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_dbname_logs_latest_get(wargame, dbname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame. (required)
        :param str dbname: The name of the database within the wargame. (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wargame_dbname_logs_latest_get_with_http_info(wargame, dbname, **kwargs)  # noqa: E501
        else:
            (data) = self.wargame_dbname_logs_latest_get_with_http_info(wargame, dbname, **kwargs)  # noqa: E501
            return data

    def wargame_dbname_logs_latest_get_with_http_info(self, wargame, dbname, **kwargs):  # noqa: E501
        """Get the latest logs for a specific database within a wargame  # noqa: E501

        Retrieves the latest logs for a specified database within the specified wargame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_dbname_logs_latest_get_with_http_info(wargame, dbname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame. (required)
        :param str dbname: The name of the database within the wargame. (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wargame', 'dbname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wargame_dbname_logs_latest_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wargame' is set
        if ('wargame' not in params or
                params['wargame'] is None):
            raise ValueError("Missing the required parameter `wargame` when calling `wargame_dbname_logs_latest_get`")  # noqa: E501
        # verify the required parameter 'dbname' is set
        if ('dbname' not in params or
                params['dbname'] is None):
            raise ValueError("Missing the required parameter `dbname` when calling `wargame_dbname_logs_latest_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wargame' in params:
            path_params['wargame'] = params['wargame']  # noqa: E501
        if 'dbname' in params:
            path_params['dbname'] = params['dbname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{wargame}/{dbname}/logs-latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wargame_force_id_counter_get(self, wargame, force, id, **kwargs):  # noqa: E501
        """Get the message counter for a specified force in a wargame  # noqa: E501

        Retrieves the message counter for the specified force in the given wargame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_force_id_counter_get(wargame, force, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame database. (required)
        :param str force: The name of the force. (required)
        :param str id: The ID of the message. (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wargame_force_id_counter_get_with_http_info(wargame, force, id, **kwargs)  # noqa: E501
        else:
            (data) = self.wargame_force_id_counter_get_with_http_info(wargame, force, id, **kwargs)  # noqa: E501
            return data

    def wargame_force_id_counter_get_with_http_info(self, wargame, force, id, **kwargs):  # noqa: E501
        """Get the message counter for a specified force in a wargame  # noqa: E501

        Retrieves the message counter for the specified force in the given wargame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_force_id_counter_get_with_http_info(wargame, force, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame database. (required)
        :param str force: The name of the force. (required)
        :param str id: The ID of the message. (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wargame', 'force', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wargame_force_id_counter_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wargame' is set
        if ('wargame' not in params or
                params['wargame'] is None):
            raise ValueError("Missing the required parameter `wargame` when calling `wargame_force_id_counter_get`")  # noqa: E501
        # verify the required parameter 'force' is set
        if ('force' not in params or
                params['force'] is None):
            raise ValueError("Missing the required parameter `force` when calling `wargame_force_id_counter_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `wargame_force_id_counter_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wargame' in params:
            path_params['wargame'] = params['wargame']  # noqa: E501
        if 'force' in params:
            path_params['force'] = params['force']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{wargame}/{force}/{id}/counter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wargame_get(self, wargame, **kwargs):  # noqa: E501
        """Retrieve all message documents for the specified wargame.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_get(wargame, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: Name of the wargame to retrieve message documents for. (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wargame_get_with_http_info(wargame, **kwargs)  # noqa: E501
        else:
            (data) = self.wargame_get_with_http_info(wargame, **kwargs)  # noqa: E501
            return data

    def wargame_get_with_http_info(self, wargame, **kwargs):  # noqa: E501
        """Retrieve all message documents for the specified wargame.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_get_with_http_info(wargame, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: Name of the wargame to retrieve message documents for. (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wargame']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wargame_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wargame' is set
        if ('wargame' not in params or
                params['wargame'] is None):
            raise ValueError("Missing the required parameter `wargame` when calling `wargame_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wargame' in params:
            path_params['wargame'] = params['wargame']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{wargame}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wargame_last_doc_id_get(self, wargame, id, **kwargs):  # noqa: E501
        """Get the last document or documents since a specific ID  # noqa: E501

        Retrieves the latest document or all documents since a specific ID for the specified wargame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_last_doc_id_get(wargame, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame database. (required)
        :param str id: The ID to retrieve documents since. (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wargame_last_doc_id_get_with_http_info(wargame, id, **kwargs)  # noqa: E501
        else:
            (data) = self.wargame_last_doc_id_get_with_http_info(wargame, id, **kwargs)  # noqa: E501
            return data

    def wargame_last_doc_id_get_with_http_info(self, wargame, id, **kwargs):  # noqa: E501
        """Get the last document or documents since a specific ID  # noqa: E501

        Retrieves the latest document or all documents since a specific ID for the specified wargame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_last_doc_id_get_with_http_info(wargame, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame database. (required)
        :param str id: The ID to retrieve documents since. (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wargame', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wargame_last_doc_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wargame' is set
        if ('wargame' not in params or
                params['wargame'] is None):
            raise ValueError("Missing the required parameter `wargame` when calling `wargame_last_doc_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `wargame_last_doc_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wargame' in params:
            path_params['wargame'] = params['wargame']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{wargame}/lastDoc/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wargame_last_get(self, wargame, **kwargs):  # noqa: E501
        """Get the last wargame  # noqa: E501

        Retrieves the last document for the specified wargame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_last_get(wargame, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame database. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wargame_last_get_with_http_info(wargame, **kwargs)  # noqa: E501
        else:
            (data) = self.wargame_last_get_with_http_info(wargame, **kwargs)  # noqa: E501
            return data

    def wargame_last_get_with_http_info(self, wargame, **kwargs):  # noqa: E501
        """Get the last wargame  # noqa: E501

        Retrieves the last document for the specified wargame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_last_get_with_http_info(wargame, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame database. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wargame']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wargame_last_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wargame' is set
        if ('wargame' not in params or
                params['wargame'] is None):
            raise ValueError("Missing the required parameter `wargame` when calling `wargame_last_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wargame' in params:
            path_params['wargame'] = params['wargame']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{wargame}/last', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wargame_list_get(self, **kwargs):  # noqa: E501
        """Get wargame list  # noqa: E501

        Retrieves a list of all wargame databases with their details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wargame_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wargame_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def wargame_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get wargame list  # noqa: E501

        Retrieves a list of all wargame databases with their details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wargame_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wargameList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wargame_put(self, body, wargame, **kwargs):  # noqa: E501
        """Update wargame  # noqa: E501

        Updates or creates a document in the specified wargame database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_put(body, wargame, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: (required)
        :param str wargame: The name of the wargame database to update. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wargame_put_with_http_info(body, wargame, **kwargs)  # noqa: E501
        else:
            (data) = self.wargame_put_with_http_info(body, wargame, **kwargs)  # noqa: E501
            return data

    def wargame_put_with_http_info(self, body, wargame, **kwargs):  # noqa: E501
        """Update wargame  # noqa: E501

        Updates or creates a document in the specified wargame database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_put_with_http_info(body, wargame, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, object) body: (required)
        :param str wargame: The name of the wargame database to update. (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'wargame']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wargame_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `wargame_put`")  # noqa: E501
        # verify the required parameter 'wargame' is set
        if ('wargame' not in params or
                params['wargame'] is None):
            raise ValueError("Missing the required parameter `wargame` when calling `wargame_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wargame' in params:
            path_params['wargame'] = params['wargame']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{wargame}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wargame_turns_get(self, wargame, **kwargs):  # noqa: E501
        """Get game turns for a specified wargame  # noqa: E501

        Retrieves all game turns for the specified wargame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_turns_get(wargame, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame database. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wargame_turns_get_with_http_info(wargame, **kwargs)  # noqa: E501
        else:
            (data) = self.wargame_turns_get_with_http_info(wargame, **kwargs)  # noqa: E501
            return data

    def wargame_turns_get_with_http_info(self, wargame, **kwargs):  # noqa: E501
        """Get game turns for a specified wargame  # noqa: E501

        Retrieves all game turns for the specified wargame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wargame_turns_get_with_http_info(wargame, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wargame: The name of the wargame database. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wargame']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wargame_turns_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wargame' is set
        if ('wargame' not in params or
                params['wargame'] is None):
            raise ValueError("Missing the required parameter `wargame` when calling `wargame_turns_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wargame' in params:
            path_params['wargame'] = params['wargame']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{wargame}/turns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
